use anyhow::{bail, Result};
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::hal::gpio;
use rust_kasa::kasa_protocol;
use std::net::TcpStream;
use wifi::wifi;


/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("blah")]
    wifi_ssid: &'static str,
    #[default("blah")]
    wifi_psk: &'static str,
}

//static FLAG: AtomicBool = AtomicBool::new(false);
//
//fn gpio_int_callback() {
//    FLAG.store(true, Ordering::Relaxed);
//    println!("callback hit");
//}
//
fn toggle() -> Result<()>{
    
    let mut stream = TcpStream::connect("10.20.10.155:9999")?;
    kasa_protocol::toggle_relay_by_idx(&mut stream, 0);
    Ok(())
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();
    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;
    

    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    let mut button = gpio::PinDriver::input(peripherals.pins.gpio21).unwrap();
    button.set_pull(gpio::Pull::Up).unwrap();
    //button.set_interrupt_type(gpio::InterruptType::PosEdge).unwrap();
    //unsafe {button.subscribe(gpio_int_callback).unwrap() }
    //button.enable_interrupt().unwrap();

    let test=  kasa_protocol::NextAction {
        r#type: 0,
    };
    println!("test12 {:?}", test.r#type);

    log::info!("Hello, world!");

    //let mut stream = TcpStream::connect("10.20.10.155:9999")?;
    //kasa_protocol::toggle_relay_by_idx(&mut stream, 0);
    loop {
        //if FLAG.load(Ordering::Relaxed) {
            //FLAG.store(false, Ordering::Relaxed);
        if button.is_low() {
            let _ = toggle();
            println!("hit");
            std::thread::sleep(std::time::Duration::from_millis(500));
        }
        std::thread::sleep(std::time::Duration::from_millis(30));
    }
}
