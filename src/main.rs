use anyhow::{bail, Result};
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::hal::prelude::*;
use esp_idf_svc::hal::task::thread::ThreadSpawnConfiguration;
use esp_idf_svc::hal::{gpio, i2c};
use std::net::TcpStream;
use std::sync::{Arc, Mutex};
use std::thread;
use wifi::wifi;

use rust_kasa::kasa_protocol;

pub mod peripheral_util;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("blah")]
    wifi_ssid: &'static str,
    #[default("blah")]
    wifi_psk: &'static str,
    #[default("127.0.0.1")]
    target_ip: &'static str,
}

fn toggle() -> Result<()> {
    let app_config = CONFIG;
    let mut stream = TcpStream::connect(format!("{:}:9999", app_config.target_ip))?;
    //let mut stream = TcpStream::connect("10.20.10.155:9999").ok().unwrap();
    kasa_protocol::toggle_relay_by_idx(&mut stream, 0);
    Ok(())
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();
    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    let mut _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    let mut button = gpio::PinDriver::input(peripherals.pins.gpio19).unwrap();
    button.set_pull(gpio::Pull::Up).unwrap();

    let enc_dt = peripherals.pins.gpio26;
    let enc_clk = peripherals.pins.gpio27;
    let enc_button = peripherals.pins.gpio14;

    let i2c = peripherals.i2c0;
    let sda = peripherals.pins.gpio22;
    let scl = peripherals.pins.gpio21;

    let config = i2c::I2cConfig::new().baudrate(400.kHz().into());
    let i2c = i2c::I2cDriver::new(i2c, sda, scl, &config)?;

    let mut rs = Arc::new(Mutex::new(peripheral_util::RemoteState::new()));
    let rs_disp = Arc::clone(&rs);
    let rs_enc = Arc::clone(&rs);
    let rs_stat = Arc::clone(&rs);

    //this apparently works for the anteceding thread builder call
    //https://github.com/esp-rs/esp-idf-hal/issues/228#issuecomment-1676035648
    ThreadSpawnConfiguration {
        name: Some("stats_service\0".as_bytes()),
        stack_size: 10000,
        priority: 16,
        ..Default::default()
    }
    .set()
    .unwrap();

    let _d_thread = thread::Builder::new().stack_size(10000).spawn(move || {
        let _ = peripheral_util::statistics_service(rs_stat);
    });

    ThreadSpawnConfiguration {
        name: Some("display_service\0".as_bytes()),
        stack_size: 10000,
        priority: 14,
        ..Default::default()
    }
    .set()
    .unwrap();

    let _d_thread = thread::Builder::new().stack_size(10000).spawn(move || {
        //let _ = peripheral_util::display_service(i2c, rs_disp);
        let _ = peripheral_util::Display::new().display_service(i2c, rs_disp);
    });

    ThreadSpawnConfiguration {
        name: Some("encoder_service\0".as_bytes()),
        stack_size: 3000,
        priority: 15,
        ..Default::default()
    }
    .set()
    .unwrap();

    let _e_thread = thread::Builder::new().stack_size(3000).spawn(move || {
        let _ = peripheral_util::encoder_service(
            //enc_a.into(), enc_b.into(), rs_enc);
            enc_dt, enc_clk, enc_button, rs_enc);
    });

    log::info!("Hello, after thread spawn");


    loop {
        if button.is_low() {
            let _ = toggle();
            println!("hit");
            std::thread::sleep(std::time::Duration::from_millis(500));
        }

        if !_wifi.is_connected().unwrap() {
            log::info!("wifi disconnected");
            std::thread::sleep(std::time::Duration::from_secs(1)); //sleep a bit
            match _wifi.connect() {
                Err(_status) => {
                    std::thread::sleep(std::time::Duration::from_secs(2)); //sleep a bit
                }
                _ => (),
            }
        }
    }
}
